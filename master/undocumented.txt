Disposable.swift
	public protocol ReduxDisposable
	var disposed: Bool { get }
	var dispose: () -> () { get }
	public struct SimpleReduxDisposable: ReduxDisposable
	public var disposed: Bool { return disposedCallback() }
	public let dispose: () -> ()
	public init(disposed: () -> Bool, dispose: () -> ())
StandardAction.swift
	init(payload: PayloadType?, meta: Any?, error: Bool)
Store.swift
	var dispatch: Dispatch { get }
	var subscribe: (State -> ()) -> ReduxDisposable { get }
	var getState: () -> State { get }
	init(dispatch: Dispatch, subscribe: (State -> ()) -> ReduxDisposable, getState: () -> State)
	public let dispatch: Dispatch
	public let subscribe: (State -> ()) -> ReduxDisposable
	public let getState: () -> State
	public var state: State { return getState() }
	public init(
        dispatch: Dispatch,
        subscribe: (State -> ()) -> ReduxDisposable,
        getState: () -> State)
FluxStandardAction.swift
	var type: String { get }
	var payload: Any? { get }
	var meta: Any? { get }
	var error: Bool { get }
SimpleStandardAction.swift
	var rawPayload: PayloadType { get }
Compose.swift
	public func compose<T>(objects: [(T) -> T]) -> (T) -> T
DefaultAction.swift
	public struct DefaultAction: Action
	public init() {}
MiddlewareApi.swift
	var dispatch: Dispatch { get }
	var getState: () -> State { get }
	init(dispatch: Dispatch, getState: () -> State)
	public let dispatch: Dispatch
	public let getState: () -> State
	public init(dispatch: Dispatch, getState: () -> State)
